openapi: 3.0.0
servers:
  - description: Sample Server API
    url: http://localhost:8000
info:
  description: |
    This is API documentation for Sample Server API
  version: "1.0.0"
  title: Sample-Server
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Public
    description: Public APIs
  - name: Protected
    description: Protected APIs, Requires Authorization header
paths:
  '/register':
    post:
      tags:
        - Public
      summary: Register user
      operationId: register
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/authenticate':
    post:
      tags:
        - Public
      summary: Authenticate user and return token
      operationId: authenticate
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authenticate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/users':
    get:
      tags:
        - Protected
      summary: Get list of users
      operationId: users
      parameters:
        - name: id
          in: query
          description: user id
          schema:
            type: string
        - name: search
          in: query
          description: search string to search name or email of user
          schema:
            type: string
        - name: role
          in: query
          description: Role of user
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      tags:
        - Protected
      summary: Update user
      operationId: updateuser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Updateuser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  '/users/upload-avatar':
    post:
      tags:
        - Protected
      summary: Upload avatar
      operationId: uploadAvatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Uploadavatar'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  '/todos':
    get:
      tags:
        - Protected
      summary: Get list of todos
      operationId: todos
      parameters:
        - name: id
          in: query
          description: todo id
          schema:
            type: string
        - name: search
          in: query
          description: search string to search title or description of todo
          schema:
            type: string
        - name: status
          in: query
          description: status of todo
          schema:
            type: integer
            format: int32
        - name: date
          in: query
          description: date of todo
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      tags:
        - Protected
      summary: Update todo
      operationId: updatetodo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Updatetodo'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      tags:
        - Protected
      summary: create todo
      operationId: createtodo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Createtodo'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Register:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: 'Arun'
        email:
          type: string
          format: email
          example: 'arun@gmail.com'
        password:
          type: string
        role:
          type: integer
          format: int32
          example: 1
    Authenticate:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: 'arun@gmail.com'
        password:
          type: string
    Updateuser:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
          example: 'John Doe'
        role:
          type: integer
          format: int32
          example: 1
        status:
          type: integer
          format: int32
          example: 1
    Updatetodo:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: integer
          format: int32
          example: 1
        date:
          type: string
          format: date
          example: "2019-08-20"
    Createtodo:
      type: object
      required:
        - title
        - date
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: integer
          format: int32
          example: 1
        date:
          type: string
          format: date
          example: "2019-08-20"
    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        result:
          type: object
    Uploadavatar:
      type: object
      properties:
        id:
          type: string
        photo:
          type: string
          format: binary
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT